#!/usr/bin/env bash
set -euo pipefail

ME="$(id -un)"
ME_UID="$(id -u)"
ME_GID="$(id -g)"
NEEDED_RANGE="100000:65536"    # standard range used by many distros

log() { printf "\033[1;36m[setup]\033[0m %s\n" "$*"; }
warn() { printf "\033[1;33m[warn]\033[0m  %s\n" "$*"; }
err() { printf "\033[1;31m[err]\033[0m   %s\n" "$*" >&2; }

have() { command -v "$1" >/dev/null 2>&1; }

detect_pm() {
  if have apt-get; then echo apt; return
  elif have dnf; then echo dnf; return
  elif have yum; then echo yum; return
  elif have pacman; then echo pacman; return
  fi
  echo "unknown"
}

install_pkgs() {
  local pm="$1"
  case "$pm" in
    apt)
      log "Installing Podman stack via apt…"
      sudo apt-get update -y
      sudo apt-get install -y podman podman-compose uidmap slirp4netns fuse-overlayfs
      ;;
    dnf)
      log "Installing Podman stack via dnf…"
      sudo dnf -y install podman podman-compose uidmap slirp4netns fuse-overlayfs
      ;;
    yum)
      log "Installing Podman stack via yum…"
      sudo yum -y install podman podman-compose uidmap slirp4netns fuse-overlayfs || true
      # Some RHEL/CentOS variants use separate repos:
      if ! have podman; then
        warn "Podman not found via yum. You may need EPEL/AppStream enabled."
        err  "Please enable required repos, then re-run this script."
        exit 1
      fi
      ;;
    pacman)
      log "Installing Podman stack via pacman…"
      sudo pacman -Sy --needed --noconfirm podman podman-compose uidmap slirp4netns fuse-overlayfs
      ;;
    *)
      err "Unsupported package manager. Install Podman manually."
      exit 1
      ;;
  esac
}

ensure_podman_installed() {
  if have podman; then
    log "Podman present: $(podman --version)"
  else
    local pm="$(detect_pm)"
    [ "$pm" = "unknown" ] && { err "No supported package manager found"; exit 1; }
    install_pkgs "$pm"
    log "Podman installed: $(podman --version)"
  fi

  # podman-compose may be a separate Python shim on some distros
  if ! have podman-compose; then
    warn "podman-compose not found; falling back to 'podman compose' (built-in)."
  fi

  for dep in newuidmap newgidmap slirp4netns fuse-overlayfs; do
    if ! have "$dep"; then
      warn "Missing dependency '$dep'. Rootless networking/storage may not work optimally."
    fi
  done
}

ensure_subids() {
  # Check /etc/subuid & /etc/subgid for current user
  local need_write_subuid=0 need_write_subgid=0
  if ! grep -q "^${ME}:" /etc/subuid 2>/dev/null; then
    need_write_subuid=1
  fi
  if ! grep -q "^${ME}:" /etc/subgid 2>/dev/null; then
    need_write_subgid=1
  fi

  if [ "$need_write_subuid" -eq 1 ] || [ "$need_write_subgid" -eq 1 ]; then
    log "Configuring /etc/subuid and /etc/subgid for rootless user namespaces…"
    # Use the standard range unless a collision exists
    # If entry exists but with a tiny range, offer to add another range.
  fi

  if [ "$need_write_subuid" -eq 1 ]; then
    echo "${ME}:${NEEDED_RANGE}" | sudo tee -a /etc/subuid >/dev/null
    log "Added subuid entry: ${ME}:${NEEDED_RANGE}"
  else
    log "/etc/subuid already configured for ${ME}"
  fi

  if [ "$need_write_subgid" -eq 1 ]; then
    echo "${ME}:${NEEDED_RANGE}" | sudo tee -a /etc/subgid >/dev/null
    log "Added subgid entry: ${ME}:${NEEDED_RANGE}"
  else
    log "/etc/subgid already configured for ${ME}"
  fi
}

ensure_rootless_storage_conf() {
  # Minimal rootless overlay configuration; safe to skip if file exists.
  local conf="$HOME/.config/containers/storage.conf"
  if [ -f "$conf" ]; then
    log "storage.conf already exists at $conf"
    return
  fi

  log "Writing minimal rootless storage.conf to $conf"
  mkdir -p "$(dirname "$conf")"
  cat > "$conf" <<'EOF'
# Auto-generated by check_podman.sh
[storage]
driver = "overlay"
runroot = "$HOME/.local/share/containers/runroot"
graphroot = "$HOME/.local/share/containers/storage"
[storage.options]
mount_program = "/usr/bin/fuse-overlayfs"
additionalimagestores = []
[storage.options.overlay]
mountopt = "nodev,metacopy=on"
EOF
}

sanity_check_rootless() {
  log "Running rootless sanity check (hello-world)…"
  # Avoid pulling a huge image; this one is tiny. Fail softly if offline.
  if ! podman run --rm hello-world >/dev/null 2>&1; then
    warn "Could not run 'hello-world' (maybe offline). Trying 'alpine echo'…"
    podman run --rm alpine:3 echo ok >/dev/null 2>&1 || warn "Alpine test also failed."
  fi
  log "Rootless sanity check complete."
}

nvidia_hint_if_needed() {
  if lspci 2>/dev/null | grep -qi 'nvidia'; then
    warn "NVIDIA GPU detected. For GPU passthrough with Podman, ensure NVIDIA container toolkit & hooks are installed."
    warn "Ollama may still run on CPU if GPU hooks aren't configured."
  fi
}

main() {
  ensure_podman_installed
  ensure_subids
  ensure_rootless_storage_conf
  nvidia_hint_if_needed

  # Inform user to re-login if subuid/subgid changed
  if grep -q "^${ME}:${NEEDED_RANGE}" /etc/subuid && grep -q "^${ME}:${NEEDED_RANGE}" /etc/subgid; then
    log "Subuid/subgid present for ${ME}."
  else
    warn "Subuid/subgid were updated. You may need to log out/in for changes to fully take effect."
  fi

  sanity_check_rootless

  log "Podman rootless setup finished."
}

main "$@"

